
---
swagger: "2.0"
info:
  description: "This is a test"
  version: "1.0.5"
  title: "API Documentation"
  contact:
    email: "support@shift72.com"
host: "staging-store.shift72.com"
basePath: "/"
tags:
- name: "User"
  description: "The user service is responsible for managing user registrations."
  externalDocs:
    description: "API Documentation"
    url: "staging-store.shift72.com"
schemes:
- "https"
- "http"
paths:
 /services/users/auth/sign_in:
    post:
      tags:
      - "User"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          $ref: "#/definitions/TEST"
      responses:
        200:
          description: "successful operation"
      security:
            
 /services/users/v1/api_key:
    get:
      tags:
      - "User"
      summary: "Get the currently active System API Key"
      description: "Use this API to get the currently active System API Key. This API is only accessible to users who have the admin role."
      operationId: "createUsersWithArrayInput"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/xml"
      responses:
        default:
          description: "successful operation"
            
            
            
            
            
 /pet/{petId}/uploadImage:
    post:
      tags:
      - "User"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
 /pet:
    post:
      tags:
      - "User"
      summary: "Add a new pet to the store"
      description: ""
      operationId: "addPet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
            
            

            
            
            
        
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
  auth:
    type: "oauth2"
    authorizationUrl: "https://staging-store.shift72.com/io/authorize"
    flow: "implicit"
    scopes:
      read:TEST: "read data"
      write:TEST: "write data"
      
      
      
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "https://petstore.swagger.io/oauth/authorize"
    flow: "implicit"
    scopes:
      read:pets: "read your pets"
      write:pets: "modify pets in your account"
      
      
        
definitions:
  ApiResponse:
    type: "object"
    properties:
      auth_token:
        type: "string"
      account:
        type: "string"
      message:
        type: "string"
      
  TEST:
    properties:
      user:
        $ref: "#/definitions/User"
      
  User:
    type: "object"
    properties:
      email:
        type: "string"
        example: "user@example.com"
      password:
        type: "string"
        example: "passw0rd"
      remember_me:
        type: "string"
        example: "false"
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        

  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          wrapped: true
        items:
          type: "string"
          xml:
            name: "photoUrl"
